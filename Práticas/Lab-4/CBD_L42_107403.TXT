// NMEC: 107403

#1 Encontre todos os atores que dirigiram um filme em que também atuaram e apresente o nome do ator e o título do filme.
match(n:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(n:Person)
return n.name as Author_Name AND m.title as Titulo_Filme

# 2. Para cada filme realizado depois de 2005, apresente os nomes de todos os atores que atuaram nesse filme.

match(n:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
return n.name as Author_Name, m.released as Data_Lançamento

# 3. Encontre pares de nós com mais do que uma relação entre si.
MATCH (n)-[r] ->(m)
WITH n,m, count(r) AS rel_count
WHERE rel_count > 1
RETURN n,m, rel_count AS Relationsships_Count 

# 4. Encontre todos os pares de pessoas que fizeram revisões do mesmo filme. Apresente os seus nomes e título de cada filme.
MATCH(p1:Person)-[:REVIEWED]->(m:Movie)<-[:REVIEWED]-(p2:Person)
WHERE p1 > p2
return p1.name, p2.name, m.title as M_name

# 5. Encontre todos os pares de atores que atuaram em vários filmes juntos.
MATCH(p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)
WHERE p1 > p2
return p1.name, p2.name, m.title as M_name

# 6. Determine a idade média do elenco do filme "Apollo 13" no ano do lançamento do filme.

MATCH(p1:Person)-[:ACTED_IN]->(m:Movie {title: "Apollo 13", released: 1995} )
WITH avg(m.released - p1.born) AS idade_media, m.title AS Movie_Title
RETURN idade_media, Movie_Title

# 7. Encontre os 10 filmes com o elenco mais velho no momento do lançamento do filme. Apresente o filme e a idade média arredondada a 2 casas decimais, por ordem decrescente.

MATCH(p1:Person)-[:ACTED_IN]->(m:Movie)
WITH avg(m.released - p1.born) AS idade_media , m.title AS Movie_Title
RETURN Movie_Title, round(idade_media,2) AS idade_media
ORDER BY idade_media DESC
LIMIT 10

# 8. Apresente o subgrafo ACTED_IN do filme com o elenco mais novo, no momento do lançamento do filme.

MATCH(p1:Person)-[:ACTED_IN]->(m:Movie)
WITH m,avg(m.released - p1.born) AS idade_media
ORDER BY idade_media ASC
LIMIT 1
MATCH(p1:Person)-[:ACTED_IN]->(m:Movie)
RETURN m,p1

# 9. Qual é o caminho mais curto (usando qualquer tipo de relação) entre John Cusack e Demi Moore?

MATCH path=shortestPath((john:Person {name: "John Cusack"})-[*]-(demi:Person {name: "Demi Moore"}))
RETURN path

# 10. Qual a dimensão caminho mais curto (usando qualquer tipo de relação) entre Keanu Reeves e Tom Cruise?

MATCH path = shortestPath(({name: "Keanu Reeves"})-[*]-({name: "Tom Cruise"}))
RETURN size(nodes(path))

# 11. Quais são as dimensões do caminho mais curto entre pessoas com nome Jim e pessoas com nome Kevin?

MATCH path = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE p1.name CONTAINS "Jim"
AND p2.name CONTAINS "Kevin"
WITH size(nodes(path)) AS dimension
ORDER BY dimension
return dimension
LIMIT 1

# 12. Que pessoas têm uma distância 2 para Jim Cash (a distância entre duas pessoas é o comprimento do caminho mais curto entre eles)?

MATCH path = shortestPath((p1:Person)-[*..2]-(p2:Person {name: "Jim Cash"})) 
WHERE p1 <> p2
RETURN p1.name;

# 13. Qual é a maior distância de uma pessoa para Kevin Bacon?

MATCH path = shortestPath((p1:Person)-[*]-(p2:Person {name: "Kevin Bacon"}))
WHERE p1 <> p2
WITH size(nodes(path)) AS dimension
ORDER BY dimension DESC
return dimension
LIMIT 1

# Deu 7 de dimension

# 14. Qual é a maior distância entre duas pessoas?

MATCH path = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE p1 <> p2
WITH size(nodes(path)) AS dimension
ORDER BY dimension DESC
return dimension
LIMIT 1

# Deu 11 de dimension

# 15. Qual é a distribuição de distâncias em pares (isto é, para a distância 1, 2, 3, ..., quantos pares de pessoas têm essa distância um do outro)?

MATCH path = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE p1 <> p2
WITH size(nodes(path)) AS dimension,
COUNT(*) as pairs
ORDER BY dimension ASC
return dimension, pairs

# 16. Indique as 10 pessoas com menor distância média em que o caminho entre elas são relações do tipo ACTED_IN.

MATCH path = shortestPath((p1:Person)-[:ACTED_IN*]-(p2:Person))
WHERE p1 <> p2
WITH p1,size(nodes(path)) AS dimension
return p1.name, AVG(dimension) as dist_media
ORDER BY dist_media ASC
LIMIT 10

# 17. Apresente os atores que tiveram pelo menos uma role para personagens com o prefixo 'Dr.'. O resultado deve ser uma lista com o par “Ator, Lista das roles”.

MATCH (p1:Person)-[a:ACTED_IN]->(Mov:Movie)
WITH p1, COLLECT(a.roles) AS allroles
UNWIND allroles AS all_roles
WITH p1, all_roles
WHERE ANY(role IN all_roles WHERE role STARTS WITH 'Dr.')
RETURN p1.name AS Actor, COLLECT(all_roles) AS Lista_de_Roles;

# 18. Apresente todas as pessoas que têm uma relação do tipo follow com outra pessoa e tenham revisto o filme "The Replacements"
MATCH (p1:Person)-[f:FOLLOWS]->(p2:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.title = "The Replacements" 
AND p1<p2
RETURN p2.name

# 19. Encontre os 5 atores mais novos na altura de lançamento do filme em que participaram
MATCH(p1:Person)-[:ACTED_IN]->(m:Movie)
WITH p1, 2023 - p1.born AS idade
RETURN p1.name, idade
ORDER BY idade ASC
LIMIT 5

# 20. Encontre os 3 filmes com maior número de envolvidos 
MATCH(p1:Person)-[*]->(m:Movie)
RETURN COUNT(*) as n_envolvidos, m.title
ORDER BY n_envolvidos DESC
LIMIT 3

Clausulas Importantes:
match
With
Where
return
UnWind

Funções Importantes:
count, avg, collect
length, shortest path

Operadores Importantes:
=
<>
Starts With
AND